{"version":3,"sources":["assets/logo.svg","helpers/files.ts","components/SaveForm.tsx","components/Spreadsheeter.tsx","reportWebVitals.ts","index.tsx"],"names":["authorName","transformCSV","csv","replace","saveSheet","sheets","fileName","format","length","Error","wbToWrite","XLSX","data","type","Props","Title","Author","CreatedDate","Date","ModifiedDate","Comments","Keywords","Category","SheetNames","name","Sheets","slice","forEach","wb","push","csvToXLSX","zip","JSZip","file","generateAsync","comment","metadata","console","log","currentFile","percent","toFixed","then","content","saveAs","blobToSave","Blob","popupDialog","SaveForm","props","label","btn","state","saveAll","selectedSheetIdx","this","newIndex","setState","event","target","value","checked","tabsValueSheetIndex","sheetIndex","field","map","sheet","idx","filter","preventDefault","timeStampedFileName","addString","generated","toISOString","rArr","Uint8Array","crypto","getRandomValues","Array","from","i","toString","join","genString","sheetsData","AppBar","position","color","Tabs","onChange","onTabChange","indicatorColor","textColor","variant","scrollButtons","aria-label","Tab","id","aria-controls","aria-labelledby","hidden","role","className","TextField","fullWidth","e","onChangeSheet","Button","disableElevation","onClick","onRemoveSheet","RemoveCircleOutline","multiline","rows","onSubmit","saveData","addSheet","size","AddCircleOutline","FormControl","select","defaultValue","onChangeFormat","MenuItem","FormHelperText","FormControlLabel","control","Checkbox","onChangeSaveAll","labelPlacement","Component","bind","Spreadsheeter","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e109a48e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import * as XLSX from 'xlsx';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport { SheetProps } from '../models/form';\n\nconst authorName = 'React-Spreadsheeter';\n\nfunction genString(addString?: string, addTimeString: boolean = true): string {\n  let generated = '';\n  if (addTimeString) {\n    generated = new Date().toISOString().slice(2, 19).replace(/[:\\-]/g, '') + '-';\n  }\n  if (!addString) {\n    const rArr = new Uint8Array(4);\n    crypto.getRandomValues(rArr);\n    generated += Array.from(rArr, (i) =>\n      (i < 10 ? '0' + i : i).toString(16)\n    ).join('');\n  } else {\n    generated += addString;\n  }\n  return generated;\n}\n\nfunction transformCSV(csv: string) {\n  const tCSV = '\"' + csv.replace(/\"/g, '\\'').replace(/,/g, '\";\"').replace(/(\\n)/gm, '\"\\r\\n\"') + '\"\\r\\n';\n  return tCSV;\n}\n\nfunction csvToXLSX(sheets: SheetProps[], fileName: string): void {\n  if (!sheets || sheets.length < 1) {\n    throw new Error('No data to export...');\n  }\n  const wbToWrite: XLSX.WorkBook = XLSX.read(\n    transformCSV(sheets[0].data), { type: 'string' });\n  // const wbToWrite = XLSX.utils.book_new();\n  // if (!wbToWrite.Props) wbToWrite.Props = {};\n  /* eslint-enable @typescript-eslint/dot-notation */\n  wbToWrite.Props = {\n    ...wbToWrite.Props,\n    /* eslint-disable @typescript-eslint/naming-convention */\n    Title: fileName,\n    Author: authorName,\n    CreatedDate: new Date(),\n    ModifiedDate: new Date(),\n    Comments: 'Generated by ' + authorName,\n    Keywords: 'CSV,sheets',\n    Category: 'Spreadsheets'\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n  // sheets.forEach(({ name, data }) =>\n  //   XLSX.utils.book_append_sheet(\n  //     wbToWrite,\n  //     XLSX.utils.aoa_to_sheet(data),\n  //     name\n  //   )\n  // );\n  // rename and relocate sheet\n  wbToWrite.SheetNames[0] = sheets[0].name;\n  /* eslint-disable @typescript-eslint/dot-notation */\n  wbToWrite.Sheets[sheets[0].name] = wbToWrite.Sheets['Sheet1'];\n  delete wbToWrite.Sheets['Sheet1'];\n  sheets.slice(1).forEach(({ name, data }) => {\n    const wb: XLSX.WorkBook = XLSX.read(transformCSV(data), { type: 'string' });\n    wbToWrite.SheetNames.push(name);\n    wbToWrite.Sheets[name] = wb.Sheets['Sheet1'];\n  });\n\n  XLSX.writeFile(wbToWrite, fileName);\n}\n\nfunction popupDialog(content: string, fileName: string, format: string) {\n  let blobToSave: Blob;\n  if (format === 'csv') {\n    blobToSave = new Blob([transformCSV(content)], {\n      type: 'text/csv;charset=utf-8'\n    });\n  } else {\n    blobToSave = new Blob([content], { type: 'text/plain;charset=utf-8'});\n  }\n  saveAs(blobToSave, fileName + '.' + format);\n  // Without using file-saver ----------------------------------------\n  // const anchor: HTMLAnchorElement = document.createElement('a');\n  // if (format.startsWith('data:')) {\n  //   anchor.download = fileName;\n  //   anchor.href = format + content;\n  // } else {\n  //   anchor.download = fileName + '.' + format;\n  //   anchor.href = `data:text/${format === 'csv' ? 'csv' : 'plain'};charset=utf-16,` + content;\n  // }\n  // anchor.click();\n  // anchor.remove();\n}\n\nfunction saveSheet(sheets: SheetProps[], fileName: string, format: string) {\n  if (format === 'xlsx') {\n    csvToXLSX(sheets, fileName + '.' + format);\n  } else if (format === 'zip') {\n    const zip = new JSZip();\n    sheets.forEach(({data, name}) => zip.file(name + '.csv', data));\n    zip.generateAsync({\n      type: 'blob', comment: 'Generated by ' + authorName}, (metadata) => {\n      // onUpdate callback\n      console.log(`Generating archive (${\n        metadata.currentFile ?? 'done'\n      }): ${metadata.percent.toFixed(2)}%`);\n    }).then((content) => {\n      saveAs(content, fileName + '.zip');\n    });\n  } else {\n    sheets.forEach(({ name, data }) => {\n      popupDialog(data, fileName + '-' + name, format);\n    });\n  }\n}\n\nexport { genString, saveSheet };\n","import React, { ChangeEvent, Component, FormEvent } from 'react';\nimport {\n  AppBar,\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  MenuItem,\n  Tabs,\n  Tab,\n  TextField\n} from '@material-ui/core';\nimport {\n  AddCircleOutline,\n  RemoveCircleOutline\n} from '@material-ui/icons';\nimport { SaveFormProps, SaveFormData, SheetProps } from '../models/form';\nimport '../styles/form.css';\nimport { genString, saveSheet } from '../helpers/files';\nimport bind from 'bind-decorator';\n\nexport default class SaveForm extends Component<SaveFormProps, SaveFormData> {\n  constructor(props: SaveFormProps) {\n    super(props);\n\n    const { label, btn, fileName } = props;\n    const sheets: SheetProps[] = [{ name: 'S1', data: '' }];\n    this.state = {\n      label: label ?? 'Sheets data',\n      btn: btn ?? 'Save',\n      fileName: fileName ?? 'spreadsheet',\n      format: 'txt',\n      saveAll: false,\n      sheets,\n      selectedSheetIdx: 0\n    } as SaveFormData;\n\n  }\n\n  @bind\n  addSheet() {\n    const sheets = this.state.sheets as SheetProps[];\n    const newIndex = sheets.length;\n    this.setState({\n      ...this.state,\n      sheets: [...sheets, { name: `S${newIndex  + 1}`, data: '' }],\n      selectedSheetIdx: newIndex\n    });\n  }\n  @bind\n  onChangeFormat(event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ ...this.state, format: event.target?.value as string });\n  }\n  @bind\n  onChangeSaveAll(event: ChangeEvent<HTMLInputElement>) {\n    const saveAll: boolean = event.target.checked;\n    this.setState({ ...this.state, saveAll });\n  };\n  @bind\n  onTabChange(\n    event: ChangeEvent<{}>,\n    tabsValueSheetIndex: number\n  ) {\n    this.setState({ ...this.state, selectedSheetIdx: tabsValueSheetIndex });\n  }\n  @bind\n  onChangeSheet(\n    event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    sheetIndex: number,\n    field: string = 'data'\n  ) {\n    this.setState({\n      ...this.state,\n      sheets: this.state.sheets.map((sheet, idx) => {\n        if (sheetIndex === idx) {\n          sheet[field as keyof SheetProps] = event.target?.value;\n        }\n        return sheet;\n      })\n    });\n  }\n  @bind\n  onRemoveSheet(\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    sheetIndex: number\n  ) {\n    this.setState({\n      ...this.state,\n      sheets: this.state.sheets.filter((sheet, idx) => idx !== sheetIndex),\n      selectedSheetIdx: 0\n    });\n  }\n  @bind\n  saveData(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    const { fileName, format, saveAll, sheets, selectedSheetIdx } = this.state;\n    const timeStampedFileName: string = genString(fileName as string);\n    if (!saveAll) {\n      saveSheet([sheets[selectedSheetIdx]], timeStampedFileName, format);\n      return;\n    }\n    saveSheet(sheets, timeStampedFileName, format);\n  }\n\n  render() {\n    const { label, btn, sheets, selectedSheetIdx } = this.state;\n    const sheetsData = <>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={selectedSheetIdx ?? 0}\n          onChange={this.onTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          aria-label=\"scrollable auto tabs example\"\n        >\n          {sheets.map((sheet, idx) => (\n            <Tab\n              key={'tab-header-' + idx}\n              label={sheet.name}\n              id={`scrollable-auto-tab-${idx}`}\n              aria-controls={`scrollable-auto-tabpanel-${idx}`}\n            />\n          ))}\n        </Tabs>\n      </AppBar>\n      { sheets.map((sheet, idx) => (\n        <section\n          key={'tab-field-' + idx}\n          aria-labelledby={`scrollable-auto-tab-${idx}`}\n          hidden={idx !== selectedSheetIdx}\n          id={`scrollable-auto-tabpanel-${idx}`}\n          role=\"tabpanel\"\n        >\n          <section className=\"data-header\">\n            <TextField\n              id={`s${idx}-name`}\n              fullWidth\n              label=\"Sheet name\"\n              value={sheet.name}\n              variant=\"outlined\"\n              onChange={(e) => this.onChangeSheet(e, idx, 'name')}\n            />\n            {idx > 0 && (\n              <Button\n                color=\"secondary\"\n                disableElevation\n                type=\"button\"\n                variant=\"contained\"\n                onClick={(e) => this.onRemoveSheet(e, idx)}\n              ><RemoveCircleOutline /></Button>\n            )}\n          </section>\n          <TextField\n            id={`s${idx}-data`}\n            fullWidth\n            label=\"Sheet data\"\n            multiline\n            rows={4}\n            value={sheet.data}\n            variant=\"outlined\"\n            onChange={(e) => this.onChangeSheet(e, idx)}\n          />\n        </section>\n      )\n      )}\n    </>;\n\n    return (\n      <form onSubmit={this.saveData}>\n        <section className=\"space-items\">\n          <h2>{label}</h2>\n          <Button\n            color=\"primary\"\n            disableElevation\n            onClick={this.addSheet}\n            size=\"small\"\n            type=\"button\"\n            variant=\"contained\"\n          ><AddCircleOutline /> Add new sheet</Button>\n        </section>\n        <section className=\"sheets\">{sheetsData}</section>\n        <section className=\"space-items\">\n          <FormControl>\n            <TextField\n              select\n              defaultValue=\"txt\"\n              label=\"File type\"\n              name=\"format\"\n              onChange={this.onChangeFormat}\n              variant=\"outlined\"\n            >\n              <MenuItem value=\"csv\">CSV</MenuItem>\n              <MenuItem value=\"xlsx\">Excel</MenuItem>\n              <MenuItem value=\"txt\">Text</MenuItem>\n              <MenuItem value=\"zip\">Zip</MenuItem>\n            </TextField>\n            <FormHelperText>File format to export</FormHelperText>\n          </FormControl>\n          <FormControlLabel\n            control={<Checkbox color=\"primary\" onChange={this.onChangeSaveAll} />}\n            label=\"Save all sheets\"\n            labelPlacement=\"end\"\n          />\n          <Button\n            disableElevation\n            color=\"primary\"\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n          >{btn}</Button>\n        </section>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport logo from '../assets/logo.svg';\nimport '../styles/main.css';\nimport SaveForm from './SaveForm';\n\nexport default class Spreadsheeter extends Component {\n  render() {\n    return (\n      <>\n        <header className=\"main-header\">\n          <img src={logo} className=\"logo\" alt=\"logo\" />\n          <h1>Spreadsheeter</h1>\n          <p>Export and save your data into different file formats</p>\n        </header>\n        <main>\n          <SaveForm btn=\"Export\" fileName=\"sheet\"></SaveForm>\n        </main>\n      </>\n    );\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Spreadsheeter from './components/Spreadsheeter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Spreadsheeter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}